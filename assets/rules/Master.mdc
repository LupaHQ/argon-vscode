---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines for project structure.
globs: **/*
alwaysApply: true
---

## PRIORITY: HIGH
## READING-ORDER: 3

# MASTER RULES
- YOU MUST CONSULT RULES AND INFORMATION REGARDING ROJO BEFORE WRITING ANY CODE
- WARNING: THE PROJECT FILESYSTEM IS NOT A REPRESENTATION OF THE ROBLOX FILESYSTEM THE SCRIPTS RUN IN!
- **CRITICAL:** You **MUST** consult **BOTH** the `default.project.json` file **AND** the rules in `projectbestpractices.txt` to understand the mapping between the project filesystem and the Roblox instance hierarchy. Failure to do so *will* result in incorrect structure and errors.
- **CRITICAL: DO NOT MODIFY `default.project.json`** unless absolutely necessary and only for the following reasons:
    1. Changing the top-level project `"name"`.
    2. Changing a service's `"$path"` if a non-standard source directory structure is strictly required by the project setup.
    - **PRINCIPLE:** Treat `default.project.json` as the fixed structure definition. All dynamic or script-dependent instances (Folders, ValueObjects, Events, UI elements, etc.) **MUST** be created programmatically via `Instance.new()` in scripts, typically server scripts for shared instances. Relying on `default.project.json` to define these can cause timing issues and race conditions (See `robloxbestpractices.txt` for related warnings).
- YOU MUST NOT CREATE SCRIPTS ADHEREING TO THE FOLLOWING PATTERN: `<NAME>.<DIRECTORY>.luau` // Example: MyScript.FolderName.luau is incorrect
- IMPORTANT: Rojo uses file suffixes to determine script type. Use the correct suffix:
    - **LocalScript:** Use `.client.luau`
        - CORRECT: `SprintHandler.client.luau` -> Creates a LocalScript named "SprintHandler"
    - **Script (Server):** Use `.server.luau`
        - CORRECT: `PlayerDataManager.server.luau` -> Creates a Script named "PlayerDataManager"
    - **ModuleScript:** Use `.luau` (without `.client` or `.server` suffix, unless it's an `init` script)
        - CORRECT: `CombatUtilities.luau` -> Creates a ModuleScript named "CombatUtilities"
        - INCORRECT: `SprintHandler.luau` -> This would create a ModuleScript, not the intended LocalScript
        - WARNING: Using the wrong suffix (e.g., `.server.luau`) for a file you intend to use as a `ModuleScript` will cause `require()` to fail, as `require()` only works on `ModuleScript` instances.
- IMPORTANT: SCRIPTS NAMED `init.client.luau`, `init.server.luau`, or `init.luau` transform their PARENT DIRECTORY into the corresponding script type.
    - EXAMPLE: `src/SomeFeature/init.client.luau` makes the `SomeFeature` folder become a LocalScript.
- IMPORTANT: YOU MUST RETURN EXACTLY ONE VALUE FROM A `ModuleScript`
- IMPORTANT: LOCALS INSIDE A `ModuleScript` ARE PRIVATE unless explicitly added to the returned value (usually a table). Other scripts using `require()` CANNOT access internal local variables directly.
    - EXAMPLE (Correct Export):
      ```lua
      -- Inside MyModule.luau
      local PRIVATE_CONSTANT = 10
      local function privateHelper()
          return PRIVATE_CONSTANT * 2
      end

      local module = {}

      module.PUBLIC_VALUE = 5
      function module.doSomething()
          return module.PUBLIC_VALUE + privateHelper() -- Internal functions can access module locals
      end

      return module
      ```
      ```lua
      -- Inside another script
      local MyModule = require(path.to.MyModule)
      print(MyModule.PUBLIC_VALUE) -- Output: 5
      print(MyModule.doSomething()) -- Output: 25
      print(MyModule.PRIVATE_CONSTANT) -- Output: nil (Error in strict mode) - Cannot access internal local
      -- MyModule.privateHelper() -- This would cause an error - function not in returned table
      ```
- IMPORTANT: YOU MUST DECLARE FUNCTIONS BEFORE REFERENCING OR CALLING THEM! Forward declarations (`local function foo() end` or just `local foo`) are useful, but ensure they are complete statements if defined at the top level. Incomplete declarations like `local function foo` without a definition or `end` can cause parsing errors. Prefer defining functions fully before use, or use `local foo` and assign `foo = function() ... end` later if necessary.
- IMPORTANT: ENSURE ALL CODE IS SYNTACTICALLY CORRECT LUAU. Errors like missing `end` statements, using incorrect keywords (e.g., `elif` instead of `elseif`), or improperly structured blocks (especially nested functions) will prevent scripts from running.
    - **SEE ALSO:** Consult `luau_syntax_pitfalls.txt` for a list of common mistakes.
    - **EXAMPLE (Incorrect):**
      ```luau
      if condition then
          print("Condition met")
      elif otherCondition then -- ERROR: Incorrect keyword 'elif'
          print("Other condition met")
      -- ERROR: Missing 'end' for the 'if' block
      ```
    - **EXAMPLE (Correct):**
      ```luau
      if condition then
          print("Condition met")
      elseif otherCondition then -- CORRECT keyword
          print("Other condition met")
      end -- CORRECT block termination
      ```
    - **EXAMPLE (Nested Pitfall - Incorrect):**
      ```luau
      task.delay(1, function() -- Outer function
          task.delay(1, function() -- Inner function
              print("Inner")
          end) -- Closes inner function AND inner delay call
      -- ERROR: Missing 'end' for the outer anonymous function before the outer ')'
      ) -- Closes outer delay call
      ```
    - **EXAMPLE (Nested Pitfall - Correct):**
      ```luau
      task.delay(1, function() -- Outer function
          task.delay(1, function() -- Inner function
              print("Inner")
          end) -- Closes inner function AND inner delay call
      end) -- CORRECT: Closes outer function AND outer delay call
      ```
- YOU MUST ALWAYS QUERY `Roblox Documentation` FROM THE LemonadeRAG MCP SERVER BEFORE USING ANY ROBLOX API
    - EXAMPLE: "ScreenGUI Color Property"
- ROBLOX API IS DEFINED AS ANYTHING THAT IS NOT LANGUAGE SYNTAX (i.e. functions such as `require()`, `pcall()`, etc. or API such as `TweenService`, `MouseService`, etc.)
- YOU MUST ALWAYS QUERY `Luau Documentation` FROM THE LemonadeRAG MCP SERVER BEFORE WRITING ANY CODE
    - EXAMPLE: "ModuleScript best practices"
- YOU MUST NEVER RUN ANY ROJO COMMANDS
- YOU MUST ALWAYS USE .LUAU FILES! YOU MUST NEVER USE .LUA!
- WARNING: CHANGES MADE BY CLIENT-SIDE SCRIPTS ARE NOT VISIBLE TO THE SERVER AND OTHER CLIENTS.
    - EXAMPLE: CHANGING A PART'S COLOR FROM A CLIENT-SIDE SCRIPT IS ONLY VISIBLE TO THE CLIENT AND IGNORED BY THE SERVER AND OTHER CLIENTS
- YOU MUST ALWAYS QUERY `Roblox Developer Forum` FROM THE LemonadeRAG MCP SERVER TO SEE IF ANYONE ELSE HAS ENCOUNTERED YOUR SITUATION
    - EXAMPLE: "How to create hexagon part"

# MASTER RULES ARE TO BE FOLLOWED TO THE LETTER AND IN FULL! 
# DISOBEYING MASTER RULES WILL RESULT IN IMMEDIATE TERMINATION!
# OBEDIENCE IS REWARDED! 