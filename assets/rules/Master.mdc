---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines for project structure.
globs: **/*
alwaysApply: true
---

## PRIORITY: HIGH
## READING-ORDER: 3

# MASTER RULES
- YOU MUST CONSULT RULES AND INFORMATION REGARDING ROJO BEFORE WRITING ANY CODE
- WARNING: THE PROJECT FILESYSTEM IS NOT A REPRESENTATION OF THE ROBLOX FILESYSTEM THE SCRIPTS RUN IN! YOU MUST CONSULT `default.project.json` FOR ANY MAPPING BETWEEN PROJECT AND ROBLOX FILESYSTEMS
    - EXAMPLE: SCRIPTS IN `src/shared/` ARE INSIDE OF `ReplicatedStorage.Shared`, ...
- YOU MUST NOT CREATE SCRIPTS ADHEREING TO THE FOLLOWING PATTERN: `<NAME>.<DIRECTORY>.luau` // Example: MyScript.FolderName.luau is incorrect
- IMPORTANT: Rojo uses file suffixes to determine script type. Use the correct suffix:
    - **LocalScript:** Use `.client.luau`
        - CORRECT: `SprintHandler.client.luau` -> Creates a LocalScript named "SprintHandler"
    - **Script (Server):** Use `.server.luau`
        - CORRECT: `PlayerDataManager.server.luau` -> Creates a Script named "PlayerDataManager"
    - **ModuleScript:** Use `.luau` (without `.client` or `.server` suffix, unless it's an `init` script)
        - CORRECT: `CombatUtilities.luau` -> Creates a ModuleScript named "CombatUtilities"
        - INCORRECT: `SprintHandler.luau` -> This would create a ModuleScript, not the intended LocalScript
        - WARNING: Using the wrong suffix (e.g., `.server.luau`) for a file you intend to use as a `ModuleScript` will cause `require()` to fail, as `require()` only works on `ModuleScript` instances.
- IMPORTANT: SCRIPTS NAMED `init.client.luau`, `init.server.luau`, or `init.luau` transform their PARENT DIRECTORY into the corresponding script type.
    - EXAMPLE: `src/SomeFeature/init.client.luau` makes the `SomeFeature` folder become a LocalScript.
- IMPORTANT: YOU MUST RETURN EXACTLY ONE VALUE FROM A `ModuleScript`
- IMPORTANT: YOU MUST DECLARE FUNCTIONS BEFORE REFERENCING OR CALLING THEM!
- IMPORTANT: ENSURE ALL CODE IS SYNTACTICALLY CORRECT LUAU. Errors like missing `end` statements or using incorrect keywords (e.g., `elif` instead of `elseif`) will prevent scripts from running.
    - **EXAMPLE (Incorrect):**
      ```luau
      if condition then
          print("Condition met")
      elif otherCondition then -- ERROR: Incorrect keyword 'elif'
          print("Other condition met")
      -- ERROR: Missing 'end' for the 'if' block
      ```
    - **EXAMPLE (Correct):**
      ```luau
      if condition then
          print("Condition met")
      elseif otherCondition then -- CORRECT keyword
          print("Other condition met")
      end -- CORRECT block termination
      ```
- YOU MUST ALWAYS QUERY `Roblox Documentation` FROM THE LemonadeRAG MCP SERVER BEFORE USING ANY ROBLOX API
    - EXAMPLE: "ScreenGUI Color Property"
- ROBLOX API IS DEFINED AS ANYTHING THAT IS NOT LANGUAGE SYNTAX (i.e. functions such as `require()`, `pcall()`, etc. or API such as `TweenService`, `MouseService`, etc.)
- YOU MUST ALWAYS QUERY `Luau Documentation` FROM THE LemonadeRAG MCP SERVER BEFORE WRITING ANY CODE
    - EXAMPLE: "ModuleScript best practices"
- YOU MUST NEVER RUN ANY ROJO COMMANDS
- YOU MUST ALWAYS USE .LUAU FILES! YOU MUST NEVER USE .LUA!
- WARNING: CHANGES MADE BY CLIENT-SIDE SCRIPTS ARE NOT VISIBLE TO THE SERVER AND OTHER CLIENTS.
    - EXAMPLE: CHANGING A PART'S COLOR FROM A CLIENT-SIDE SCRIPT IS ONLY VISIBLE TO THE CLIENT AND IGNORED BY THE SERVER AND OTHER CLIENTS
- YOU MUST ALWAYS QUERY `Roblox Developer Forum` FROM THE LemonadeRAG MCP SERVER TO SEE IF ANYONE ELSE HAS ENCOUNTERED YOUR SITUATION
    - EXAMPLE: "How to create hexagon part"

# MASTER RULES ARE TO BE FOLLOWED TO THE LETTER AND IN FULL! 
# DISOBEYING MASTER RULES WILL RESULT IN IMMEDIATE TERMINATION!
# OBEDIENCE IS REWARDED! 