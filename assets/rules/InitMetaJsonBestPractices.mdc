---
description: 
globs: 
alwaysApply: true
---
---
description: Rojo init.meta.json Best Practices & Lessons Learned
globs: **/*
alwaysApply: true
---

## PRIORITY: HIGH
## READING-ORDER: 6

---

**IMPORTANT NOTE:** For UI elements (Frames, Buttons, Labels, etc.) that are referenced or manipulated by scripts, **DO NOT** use `init.meta.json` to define them. You **MUST** create them programmatically using `Instance.new()` as mandated in `robloxbestpractices.txt`. This file covers `.meta.json` usage for other purposes (e.g., setting properties on scripts/models, defining non-UI instances) and general syntax.

## 1. Key Casing & Complex Types (Summary)
- ALWAYS use lowercase keys ('className', 'properties', and keys *inside* 'properties').
  (Incorrect: `"ClassName"`, `"Properties"`, `"Size"`)
- ALWAYS use explicit formats for complex types when defining properties in `.meta.json` (relevant if using it for non-UI instances or script properties).
  (Incorrect: `"size": [[0,100],[0,50]]`) 
  (Correct: `"size": {"UDim2": [[0,100],[0,50]]}`) 
  (Incorrect: `"backgroundColor3": [1,0,0]`)
  (Correct: `"backgroundColor3": {"Color3": [1,0,0]}`)

## 2. Script Communication: Attributes vs. Alternatives

- **PROBLEM:** You might be tempted to use `Instance:SetAttribute()` and `Instance:GetAttribute()` to share information *between different scripts*, especially functions or complex data.
- **WARNING:** Attributes **CANNOT** store Lua functions or tables containing functions. Attempting to do so will fail and `GetAttribute` will return `nil`.

  ```lua
  -- INCORRECT: Trying to share a function via Attributes
  -- Script 1 (e.g., SomeScript.client.luau)
  local function updateDisplay() print("Updating!") end
  someInstance:SetAttribute("UpdateFunction", updateDisplay) -- This FAILS! Attribute won't store the function.

  -- Script 2 (e.g., AnotherScript.client.luau)
  local updateFunc = someInstance:GetAttribute("UpdateFunction") -- This will be nil!
  if updateFunc then
      updateFunc() -- This code will NEVER run
  end
  ```

- **RECOMMENDED SOLUTIONS:**
  1.  **Combine Scripts:** If two client scripts manage related logic, often the simplest solution is to merge them into a single script.
  2.  **BindableEvents:** For communication *between client scripts*, use `BindableEvent` instances. One script fires the event, and the other connects a function to it.
  3.  **ModuleScripts:** If you need to share functions or data structures, place them in a `ModuleScript` and `require()` it from the scripts that need access. This is the standard way to create shared, reusable code.
  4.  **(Avoid for Functions):** Attributes are suitable for sharing simple state data (numbers, strings, booleans, Color3s, etc.) if needed, but not functions.