---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines about Roblox scripting best-practices for client-server integrity and maintainable scripts.
globs: **/*
alwaysApply: true
---

## PRIORITY: HIGH
## READING-ORDER: 5

- In Roblox, clients (`.client.luau`) can't directly change a server-side (`.server.luau`) property - to change a server-side property, we need to request the server to do it. 
- In Roblox's security model, client scripts cannot directly modify server objects.
- For example, The `TakeDamage()` method in a client script sends that request to the server, but directly setting `Health = 0` from the client is blocked by Roblox's security system.
- Use clear variable naming (`PascalCase` for services, folders, modules, table keys and table functions;
    1. `SCREAMING_SNAKE_CASE` for constants;
    2. `camelCase` for local variables and functions).
- General script structure should go in this order: services, folders, modules, constants, and then typical variables oragnized into groups.
- Do not define Workspace as a variable, use the workspace global. Use `task.wait()`, `task.spawn()`, and `task.delay()` over `wait()`, `spawn()`, and `delay()`. 
- `task.cancel()` should be used to cancel all threads.
- Use generalized iteration (no `ipairs()` or `pairs()` is needed).
- Do not use `WaitForChild` on Workspace instances unless necessary (runtime creation or StreamingEnabled client). See UI rule below.

- **MANDATORY API TYPE RULE:** Pay close attention to the expected data types for Roblox Instance properties. Assigning an incorrect Luau type (e.g., `Vector3` to a `CFrame` property) will cause runtime errors.
    - **REASON:** While Luau is dynamically typed, many Roblox properties have strict type requirements enforced by the engine.
    - **CONSEQUENCE:** Runtime errors like "Unable to assign property [PropertyName]. [ExpectedType] expected, got [ActualType]".
    - **EXAMPLE (Incorrect):**
      ```luau
      local part = Instance.new("Part")
      local positionVector = Vector3.new(0, 10, 0)
      part.CFrame = positionVector -- ERROR: Assigning Vector3 to CFrame property
      ```
    - **EXAMPLE (Correct):**
      ```luau
      local part = Instance.new("Part")
      local positionVector = Vector3.new(0, 10, 0)
      part.CFrame = CFrame.new(positionVector) -- CORRECT: Assigning a CFrame
      -- or
      part.Position = positionVector -- CORRECT: Assigning Vector3 to Position property
      ```

- **MANDATORY UI RULE:** UI elements referenced or manipulated by scripts **MUST** be created programmatically using `Instance.new()`.
    - **REASON:** Defining scripted UI via Rojo (`init.meta.json` or implicit folders) causes critical errors: type mismatches (finding `Folder` instead of `Frame`), infinite `WaitForChild` yields, timing issues (accessing properties before calculation), and conflicts with `init` scripts (e.g., `init.client.luau` expects parent to be `LocalScript`, but `init.meta.json` might force it to be `ScreenGui`, preventing the script from running correctly).
    - **CONSEQUENCE:** Non-functional UI, difficult-to-debug errors.
    - **PREFER (Correct):**
      ```luau
      -- In LocalScript:
      local frame = Instance.new("Frame")
      frame.Name = "MyFrame"
      frame.Parent = someParentScreenGui
      -- Script can now reliably use 'frame'
      ```
    - **AVOID (Incorrect):**
      ```plaintext
      # Avoid defining scripted UI via Rojo files/folders:
      # src/StarterGui/MyFrame/init.meta.json  <-- DON'T DO THIS
      # src/StarterGui/MyOtherFrame/           <-- DON'T DO THIS (creates Folder)
      ```
      ```luau
      -- Avoid finding UI defined by Rojo in scripts:
      local frame = parentGui:WaitForChild("MyFrame") -- Unreliable/Error-prone!
      ```