---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines about workspace folder structure (directories).
globs: **/*
alwaysApply: true
---

## PRIORITY: HIGH
## READING-ORDER: 4

## Purpose
To ensure correct file placement in Rojo projects by strictly adhering to the project's `default.project.json` mapping.

## 1. Understanding `default.project.json`

- **Rojo:** Uses `default.project.json` to map your project files to Roblox instances (like Folders, Scripts, Services).
- **Required Fields:** Every `default.project.json` *must* have a `name` (string) and a `tree` (object).
- **`tree` Object:** This defines your project's root in Roblox and contains mappings. Keys inside `tree` typically represent Roblox instances.

## 2. Core Mapping Properties (`$path`, `$className`, `$properties`)

- **`$path`:** Tells Rojo: "Sync the contents of *this filesystem directory* into this Roblox instance." (e.g., `"src/ReplicatedStorage"`).
- **`$className`:** Specifies the Roblox class (e.g., `"Folder"`, `"ScreenGui"`). Often used when *not* using `$path` or to define services.
- **`$properties`:** An object defining properties to set on the instance (e.g., `{"Archivable": false}`). Property formatting rules are in `InitMetaJsonBestPractices.mdc`.
- **Child Instances:** Any key in the `tree` that *doesn't* start with `$` defines a *named child instance*. The key itself becomes the instance's `Name`.
  ```json
  // Example: Creates a Folder named "MyFolder" inside ReplicatedStorage
  "ReplicatedStorage": {
    "$path": "src/ReplicatedStorage", // Maps the service
    "MyFolder": {                  // Defines a child instance named "MyFolder"
      "$className": "Folder"       // Specifies its class
    }
  }
  ```

## 2.1 WARNING: Potential Conflict Between `$path` and Explicit Child Definitions

- **ISSUE:** A conflict can occur if you use `$path` to sync a directory (e.g., `src/ReplicatedStorage`) AND you *also* explicitly define a child instance in `default.project.json` with the same name as a folder *inside* that synced directory (e.g., defining an `Events` instance when `src/ReplicatedStorage/Events/` exists).
- **CONSEQUENCE:** This can lead to duplicate instances in Studio (one synced via `$path`, one created explicitly) or unpredictable behavior, causing errors like infinite yields when scripts try to find children.
- **EXAMPLE SCENARIO (Problematic):**
  ```json
  // default.project.json (excerpt) - POTENTIAL CONFLICT
  "ReplicatedStorage": {
    "$path": "src/ReplicatedStorage", // Syncs the src/ReplicatedStorage folder
    "Events": {                      // ALSO explicitly defines an 'Events' instance
      "$className": "Folder"
    }
  }
  ```
  ```plaintext
  # Filesystem structure
  src/
    ReplicatedStorage/
      Events/             <-- This folder exists physically
        SomeScript.luau
  ```
  This setup might create TWO "Events" folders in `ReplicatedStorage`.

- **RECOMMENDED SOLUTIONS:**
  1.  **Rely on `$path` Only:** If you have a physical folder (`src/ReplicatedStorage/Events/`), let `$path` handle syncing it. Use `init.meta.json` inside `src/ReplicatedStorage/Events/` if you need to specify its `className` or add children metadata.
      ```json
      // default.project.json (excerpt) - Relies on $path
      "ReplicatedStorage": {
        "$path": "src/ReplicatedStorage"
      }
      ```
      ```plaintext
      # Filesystem structure with metadata
      src/
        ReplicatedStorage/
          Events/
            init.meta.json   <-- Defines Events folder & children
            RoundStateChanged.luau.init.meta.json <-- Or define children via file metadata
      ```
  2.  **Define Virtually Only:** If you don't need a physical folder for organizing source files, define the instance and its children entirely within `default.project.json` and *do not* create a corresponding physical folder in the `src` directory.
      ```json
      // default.project.json (excerpt) - Defines virtually
      "ReplicatedStorage": {
        "$path": "src/ReplicatedStorage", // Syncs OTHER items if present
        "Events": {                      // Defines Events virtually
          "$className": "Folder",
          "RoundStateChanged": {         // Defines child virtually
            "$className": "RemoteEvent"
          }
        }
      }
      ```
      ```plaintext
      # Filesystem structure - NO Events folder needed here
      src/
        ReplicatedStorage/
          SomeOtherModule.luau
      ```

## 3. Path Authority: `default.project.json` is KING

**RULE: The `$path` values in `default.project.json` are the ONLY source of truth for where to put your files when syncing directories.**

- **ALWAYS:** Check `default.project.json` first. Find the Roblox service/instance you want to add to (e.g., `StarterGui`, `ReplicatedStorage`). Look at its `$path` value. Place your new files/folders inside *that exact filesystem directory*.
- **NEVER:** Guess filesystem paths based on common conventions (`src/client/`, `src/server/`, `src/shared/`, or even matching the service name like `src/StarterGui/`) if they don't match the `$path` specified in *your* `default.project.json`.

**REASONING:** Rojo ONLY looks at the `$path` specified in `default.project.json` for directory syncing. Using any other directory structure *will* result in your code not being placed correctly in the game, causing errors.

## 4. Examples (`$path` in `default.project.json` determines the CORRECT filesystem path)

**Scenario 1: `default.project.json` maps `StarterGui` to `src/Interface`**
```json
// default.project.json (excerpt)
"StarterGui": {
  "$path": "src/Interface"
}
```
- **CORRECT Filesystem Path:** `src/Interface/` (e.g., `src/Interface/MyGui/Handler.client.luau`).
- **INCORRECT Filesystem Paths:** `src/StarterGui/`, `src/client/StarterGui/`.

**Scenario 2: `default.project.json` maps `ReplicatedStorage` to `src/SharedCode`**
```json
// default.project.json (excerpt)
"ReplicatedStorage": {
  "$path": "src/SharedCode"
}
```
- **CORRECT Filesystem Path:** `src/SharedCode/` (e.g., `src/SharedCode/Utilities.luau`).
- **INCORRECT Filesystem Paths:** `src/ReplicatedStorage/`, `src/shared/`.

**Scenario 3: `default.project.json` uses standard names**
```json
// default.project.json (excerpt)
"ServerScriptService": {
  "$path": "src/ServerScriptService"
}
```
- **CORRECT Filesystem Path:** `src/ServerScriptService/` (e.g., `src/ServerScriptService/MainLoop.server.luau`).
- **INCORRECT Filesystem Path:** `src/server/` (unless `$path` explicitly points there).
