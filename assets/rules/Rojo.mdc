---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines about workspace folder structure (directories).
globs: **/*
alwaysApply: true
---

## PRIORITY: HIGH
## READING-ORDER: 4

# Rojo File Sync Rules

## Purpose
To ensure correct placement and recognition of specific files (like `.meta.json` anchors) when using Rojo, especially within directories managed by `$path` in `default.project.json`.

+ **Note:** For general guidelines on structuring `default.project.json` (like using `$path` vs. virtual instances, minimizing definitions, etc.), consult `projectbestpractices.txt`. This file focuses on specific file-level syncing rules.

## 1. Ensuring `.meta.json` Instances Are Created Inside `$path` Directories

- **SITUATION:** You are syncing a directory using `$path` (e.g., `"$path": "src/ReplicatedStorage/Events"`) and want to define specific non-script instances *inside* that directory using individual `.meta.json` files (e.g., `src/ReplicatedStorage/Events/MyEvent.meta.json` defining a `RemoteEvent`, `BoolValue`, `Folder`, etc.).
- **POTENTIAL ISSUE:** Rojo might not reliably create the instance defined in the `.meta.json` file unless a corresponding source file (usually `.luau`) exists alongside it to act as an anchor.
- **CONSEQUENCE:** Failure to create the instance, leading to runtime errors like `Infinite yield possible` when scripts use `WaitForChild` to find the instance.
- **RECOMMENDATION:** If you define an instance using a *non-init* `.meta.json` file within a directory managed by `$path`, **also create an empty placeholder `.luau` file with the same base name.**
- **REASON:** The empty placeholder file acts as an anchor for Rojo to correctly process the associated `.meta.json` when scanning the `$path` directory. Leaving it empty prevents Rojo from attempting to assign its content to invalid properties (like `Source` on a `BoolValue`), avoiding warnings.
- **EXAMPLE (Correct Structure):**
  ```plaintext
  # Filesystem structure
  src/
    ReplicatedStorage/
      Events/                 <-- Synced via "$path": "src/ReplicatedStorage/Events"
        RoundStateChanged.meta.json  <-- Defines RemoteEvent
        RoundStateChanged.luau       <-- Corresponding ANCHOR file (MUST exist)
  ```
  ```json
  // src/ReplicatedStorage/Events/RoundStateChanged.meta.json
  {
    "className": "RemoteEvent"
  }
  ```
  ```lua
  -- src/ReplicatedStorage/Events/RoundStateChanged.luau
  -- This file MUST exist but should be EMPTY.
  ```

## 4. `$path` vs. Explicit Child Definitions vs. `init.meta.json`

- **WARNING: Potential Conflict:** A conflict can occur if you use `$path` to sync a directory (e.g., `src/ReplicatedStorage`) AND you *also* explicitly define a child instance in `default.project.json` with the same name as a folder *inside* that synced directory (e.g., defining `"MyFolder": { "$className": "Folder" }` when `src/ReplicatedStorage/MyFolder/` exists).
- **CONSEQUENCE:** This can lead to duplicate instances in Studio or unpredictable behavior.
- **RECOMMENDED SOLUTIONS:** Choose **one** primary method per instance:
  1.  **Sync via `$path` (Implicit Folders/Files):** If you have a physical folder (`src/ReplicatedStorage/MyFolder/`), let `$path` on `ReplicatedStorage` handle syncing it. Rojo will create a `Folder` instance by default for the directory.
  2.  **Sync via `$path` with Directory Transformation (`init.meta.json`):** If you have a physical folder (`src/ReplicatedStorage/MyValue/`) but want it to become a specific *non-Folder* instance (e.g., a `BoolValue`), place an `init.meta.json` file *inside* that folder. The `$path` on the parent (`ReplicatedStorage`) still syncs the contents, but Rojo uses `init.meta.json` to determine the class for `MyValue`. See `initmetajsonbestpractices.txt` for the `init.meta.json` rule.
      ```json
      // default.project.json (excerpt) - Relies on $path
      "ReplicatedStorage": {
        "$path": "src/ReplicatedStorage" // Syncs everything inside
      }
      ```
      ```plaintext
      # Filesystem structure
      src/
        ReplicatedStorage/
          MyValue/          <-- Synced because of $path
            init.meta.json <-- REQUIRED: Defines MyValue's class (e.g., BoolValue)
      ```
  3.  **Define Virtually (in `default.project.json`):** If you don't need a physical folder for organization, define the instance and its children entirely within `default.project.json` and *do not* create a corresponding physical folder in the `src` directory linked by `$path`.
      ```json
      // default.project.json (excerpt) - Defines virtually
      "ReplicatedStorage": {
        "$className": "ReplicatedStorage", // Define service
        "MyFolder": {                   // Defines MyFolder virtually
          "$className": "Folder"
        }
      }
      ```
      ```plaintext
      # Filesystem structure - NO MyFolder needed here
      src/
        ReplicatedStorage/ # May not even need this if nothing else uses $path
          SomeOtherModule.luau
      ```
